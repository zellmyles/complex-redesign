'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var propTypes = {
  tag: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]),
  className: _propTypes2.default.string,
  cssModule: _propTypes2.default.object
};

var defaultProps = {
  tag: 'div'
};

var CardDeck = function CardDeck(props) {
  var className = props.className,
      cssModule = props.cssModule,
      Tag = props.tag,
      attributes = _objectWithoutProperties(props, ['className', 'cssModule', 'tag']);

  var classes = (0, _utils.mapToCssModules)((0, _classnames2.default)(className, 'card-deck'), cssModule);

  return _react2.default.createElement(Tag, _extends({}, attributes, { className: classes }));
};

CardDeck.propTypes = propTypes;
CardDeck.defaultProps = defaultProps;

exports.default = CardDeck;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9DYXJkRGVjay5qcyJdLCJuYW1lcyI6WyJwcm9wVHlwZXMiLCJ0YWciLCJQcm9wVHlwZXMiLCJvbmVPZlR5cGUiLCJmdW5jIiwic3RyaW5nIiwiY2xhc3NOYW1lIiwiY3NzTW9kdWxlIiwib2JqZWN0IiwiZGVmYXVsdFByb3BzIiwiQ2FyZERlY2siLCJwcm9wcyIsIlRhZyIsImF0dHJpYnV0ZXMiLCJjbGFzc2VzIiwiUmVhY3QiLCJjcmVhdGVFbGVtZW50Il0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7QUFFQSxJQUFNQSxZQUFZO0FBQ2hCQyxPQUFLQyxvQkFBVUMsU0FBVixDQUFvQixDQUFDRCxvQkFBVUUsSUFBWCxFQUFpQkYsb0JBQVVHLE1BQTNCLENBQXBCLENBRFc7QUFFaEJDLGFBQVdKLG9CQUFVRyxNQUZMO0FBR2hCRSxhQUFXTCxvQkFBVU07QUFITCxDQUFsQjs7QUFNQSxJQUFNQyxlQUFlO0FBQ25CUixPQUFLO0FBRGMsQ0FBckI7O0FBSUEsSUFBTVMsV0FBVyxTQUFYQSxRQUFXLENBQUNDLEtBQUQsRUFBVztBQUFBLE1BRXhCTCxTQUZ3QixHQU10QkssS0FOc0IsQ0FFeEJMLFNBRndCO0FBQUEsTUFHeEJDLFNBSHdCLEdBTXRCSSxLQU5zQixDQUd4QkosU0FId0I7QUFBQSxNQUluQkssR0FKbUIsR0FNdEJELEtBTnNCLENBSXhCVixHQUp3QjtBQUFBLE1BS3JCWSxVQUxxQiw0QkFNdEJGLEtBTnNCOztBQU8xQixNQUFNRyxVQUFVLDRCQUFnQiwwQkFDOUJSLFNBRDhCLEVBRTlCLFdBRjhCLENBQWhCLEVBR2JDLFNBSGEsQ0FBaEI7O0FBS0EsU0FDRVEsZ0JBQU1DLGFBQU4sQ0FBb0JKLEdBQXBCLGVBQThCQyxVQUE5QixJQUEwQ1AsV0FBV1EsT0FBckQsSUFERjtBQUdELENBZkQ7O0FBaUJBSixTQUFTVixTQUFULEdBQXFCQSxTQUFyQjtBQUNBVSxTQUFTRCxZQUFULEdBQXdCQSxZQUF4Qjs7a0JBRWVDLFEiLCJmaWxlIjoiQ2FyZERlY2suanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgeyBtYXBUb0Nzc01vZHVsZXMgfSBmcm9tICcuL3V0aWxzJztcblxuY29uc3QgcHJvcFR5cGVzID0ge1xuICB0YWc6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgY3NzTW9kdWxlOiBQcm9wVHlwZXMub2JqZWN0LFxufTtcblxuY29uc3QgZGVmYXVsdFByb3BzID0ge1xuICB0YWc6ICdkaXYnLFxufTtcblxuY29uc3QgQ2FyZERlY2sgPSAocHJvcHMpID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzTmFtZSxcbiAgICBjc3NNb2R1bGUsXG4gICAgdGFnOiBUYWcsXG4gICAgLi4uYXR0cmlidXRlc1xuICB9ID0gcHJvcHM7XG4gIGNvbnN0IGNsYXNzZXMgPSBtYXBUb0Nzc01vZHVsZXMoY2xhc3NOYW1lcyhcbiAgICBjbGFzc05hbWUsXG4gICAgJ2NhcmQtZGVjaydcbiAgKSwgY3NzTW9kdWxlKTtcblxuICByZXR1cm4gKFxuICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVGFnLCB7IC4uLmF0dHJpYnV0ZXMsIGNsYXNzTmFtZTogY2xhc3NlcyB9KVxuICApO1xufTtcblxuQ2FyZERlY2sucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuQ2FyZERlY2suZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuXG5leHBvcnQgZGVmYXVsdCBDYXJkRGVjaztcbiJdfQ==