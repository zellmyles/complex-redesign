'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var propTypes = {
  tag: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]),
  getRef: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]),
  className: _propTypes2.default.string,
  cssModule: _propTypes2.default.object
};

var defaultProps = {
  tag: 'a'
};

var CardLink = function CardLink(props) {
  var className = props.className,
      cssModule = props.cssModule,
      Tag = props.tag,
      getRef = props.getRef,
      attributes = _objectWithoutProperties(props, ['className', 'cssModule', 'tag', 'getRef']);

  var classes = (0, _utils.mapToCssModules)((0, _classnames2.default)(className, 'card-link'), cssModule);

  return _react2.default.createElement(Tag, _extends({}, attributes, { ref: getRef, className: classes }));
};

CardLink.propTypes = propTypes;
CardLink.defaultProps = defaultProps;

exports.default = CardLink;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9DYXJkTGluay5qcyJdLCJuYW1lcyI6WyJwcm9wVHlwZXMiLCJ0YWciLCJQcm9wVHlwZXMiLCJvbmVPZlR5cGUiLCJmdW5jIiwic3RyaW5nIiwiZ2V0UmVmIiwiY2xhc3NOYW1lIiwiY3NzTW9kdWxlIiwib2JqZWN0IiwiZGVmYXVsdFByb3BzIiwiQ2FyZExpbmsiLCJwcm9wcyIsIlRhZyIsImF0dHJpYnV0ZXMiLCJjbGFzc2VzIiwiUmVhY3QiLCJjcmVhdGVFbGVtZW50IiwicmVmIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7QUFFQSxJQUFNQSxZQUFZO0FBQ2hCQyxPQUFLQyxvQkFBVUMsU0FBVixDQUFvQixDQUFDRCxvQkFBVUUsSUFBWCxFQUFpQkYsb0JBQVVHLE1BQTNCLENBQXBCLENBRFc7QUFFaEJDLFVBQVFKLG9CQUFVQyxTQUFWLENBQW9CLENBQUNELG9CQUFVRSxJQUFYLEVBQWlCRixvQkFBVUcsTUFBM0IsQ0FBcEIsQ0FGUTtBQUdoQkUsYUFBV0wsb0JBQVVHLE1BSEw7QUFJaEJHLGFBQVdOLG9CQUFVTztBQUpMLENBQWxCOztBQU9BLElBQU1DLGVBQWU7QUFDbkJULE9BQUs7QUFEYyxDQUFyQjs7QUFJQSxJQUFNVSxXQUFXLFNBQVhBLFFBQVcsQ0FBQ0MsS0FBRCxFQUFXO0FBQUEsTUFFeEJMLFNBRndCLEdBT3RCSyxLQVBzQixDQUV4QkwsU0FGd0I7QUFBQSxNQUd4QkMsU0FId0IsR0FPdEJJLEtBUHNCLENBR3hCSixTQUh3QjtBQUFBLE1BSW5CSyxHQUptQixHQU90QkQsS0FQc0IsQ0FJeEJYLEdBSndCO0FBQUEsTUFLeEJLLE1BTHdCLEdBT3RCTSxLQVBzQixDQUt4Qk4sTUFMd0I7QUFBQSxNQU1yQlEsVUFOcUIsNEJBT3RCRixLQVBzQjs7QUFRMUIsTUFBTUcsVUFBVSw0QkFBZ0IsMEJBQzlCUixTQUQ4QixFQUU5QixXQUY4QixDQUFoQixFQUdiQyxTQUhhLENBQWhCOztBQUtBLFNBQ0VRLGdCQUFNQyxhQUFOLENBQW9CSixHQUFwQixlQUE4QkMsVUFBOUIsSUFBMENJLEtBQUtaLE1BQS9DLEVBQXVEQyxXQUFXUSxPQUFsRSxJQURGO0FBR0QsQ0FoQkQ7O0FBa0JBSixTQUFTWCxTQUFULEdBQXFCQSxTQUFyQjtBQUNBVyxTQUFTRCxZQUFULEdBQXdCQSxZQUF4Qjs7a0JBRWVDLFEiLCJmaWxlIjoiQ2FyZExpbmsuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgeyBtYXBUb0Nzc01vZHVsZXMgfSBmcm9tICcuL3V0aWxzJztcblxuY29uc3QgcHJvcFR5cGVzID0ge1xuICB0YWc6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIGdldFJlZjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjc3NNb2R1bGU6IFByb3BUeXBlcy5vYmplY3QsXG59O1xuXG5jb25zdCBkZWZhdWx0UHJvcHMgPSB7XG4gIHRhZzogJ2EnXG59O1xuXG5jb25zdCBDYXJkTGluayA9IChwcm9wcykgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NOYW1lLFxuICAgIGNzc01vZHVsZSxcbiAgICB0YWc6IFRhZyxcbiAgICBnZXRSZWYsXG4gICAgLi4uYXR0cmlidXRlc1xuICB9ID0gcHJvcHM7XG4gIGNvbnN0IGNsYXNzZXMgPSBtYXBUb0Nzc01vZHVsZXMoY2xhc3NOYW1lcyhcbiAgICBjbGFzc05hbWUsXG4gICAgJ2NhcmQtbGluaydcbiAgKSwgY3NzTW9kdWxlKTtcblxuICByZXR1cm4gKFxuICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVGFnLCB7IC4uLmF0dHJpYnV0ZXMsIHJlZjogZ2V0UmVmLCBjbGFzc05hbWU6IGNsYXNzZXMgfSlcbiAgKTtcbn07XG5cbkNhcmRMaW5rLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbkNhcmRMaW5rLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxuZXhwb3J0IGRlZmF1bHQgQ2FyZExpbms7XG4iXX0=